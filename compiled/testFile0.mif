DEPTH = 256;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN

00        :  00001000;              -- loadi A0 IO ; get A
01        :  11111110;              -- 
02        :  00001001;              -- loadi A1 IO ; get B
03        :  11111110;              -- 
04        :  01010110;              -- move A6 A0 ; copy A
05        :  00000000;              -- 
06        :  01010111;              -- move A7 A1 ; copy B
07        :  00100000;              -- 
08        :  00100110;              -- subtract A6 A7 ; A6 <- A - B
09        :  11100000;              -- 
0A        :  01001110;              -- jmpn A6_call_add ; jump to add if A < B
0B        :  00010000;              -- 
0C        :  10011000;              -- call _sub ; call sub if A >= B
0D        :  00100110;              -- 
0E        :  00111000;              -- jump _exit
0F        :  00010010;              -- 
10        :  10011000;              -- _call_add: call _add
11        :  00010100;              -- 
[12..13]:  00000000;              -- 
14        :  10000111;              -- push A7
15        :  00000000;              -- 
16        :  10000110;              -- push A6
17        :  00000000;              -- 
18        :  01010111;              -- move A7 A0
19        :  00000000;              -- 
1A        :  01010110;              -- move A6 A1
1B        :  00100000;              -- 
1C        :  00011111;              -- add A7 A6
1D        :  11000000;              -- 
1E        :  00010111;              -- storei A7 IO
1F        :  11111110;              -- 
20        :  10001110;              -- pop A6
21        :  00000000;              -- 
22        :  10001111;              -- pop A7
23        :  00000000;              -- 
24        :  10100000;              -- return
25        :  00000000;              -- 
26        :  10000111;              -- push A7
27        :  00000000;              -- 
28        :  10000110;              -- push A6
29        :  00000000;              -- 
2A        :  01010111;              -- move A7 A0
2B        :  00000000;              -- 
2C        :  01010110;              -- move A6 A1
2D        :  00100000;              -- 
2E        :  00100111;              -- subtract A7 A6
2F        :  11000000;              -- 
30        :  00010111;              -- storei A7 IO
31        :  11111110;              -- 
32        :  10001110;              -- pop A6
33        :  00000000;              -- 
34        :  10001111;              -- pop A7
35        :  00000000;              -- 
36        :  10100000;              -- return
[37..FF]:  00000000;              -- 
END;
